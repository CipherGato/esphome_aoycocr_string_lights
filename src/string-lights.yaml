substitutions:
  plug_name: "string-lights"
  friendly_name: "String Lights"

esphome:
  name: ${plug_name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

button:
  # Switch to restart the plug
  - platform: restart
    name: "${friendly_name} Restart"
    web_server:
      sorting_group_id: sorting_group_esphome_settings

bk72xx:
  board: generic-bk7231t-qfn32-tuya

# Disable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "xxxxxxxxxxxxx"

ota:
  - platform: esphome
    password: "xxxxxxxxxxxxxxxxx"

wifi:
  ssid: "IOT"
  password: "xxxxxxxxxxxxxxxxxx"
  reboot_timeout: 600s
  power_save_mode: none
  fast_connect: true

  manual_ip:
    static_ip: 192.168.0.97
    gateway: 192.168.0.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "String-Lights Fallback Hotspot"
    password: "xxxxxxxxxxxxxxxxxxxxxxxxxx"

captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp8266.yaml@main
  import_full_config: true

## not secure -- remove!
# To have a "next url" for improv serial
web_server:
  version: 3
  sorting_groups:
    - id: sorting_group_esphome_settings
      name: "Esphome Settings"
      sorting_weight: 1
    - id: sorting_group_mode_settings
      name: "Mode Settings"
      sorting_weight: 10
    - id: sorting_group_fixed_settings
      name: "Fixed Colour Settings"
      sorting_weight: 20
    - id: sorting_group_animation_settings
      name: "Animation Settings"
      sorting_weight: 30
    - id: sorting_group_music_settings
      name: "Music Settings"
      sorting_weight: 40


uart:
  tx_pin: P11
  rx_pin: P10
  baud_rate: 115200


tuya:
  id: "tuyadevice"


select:
  - platform: tuya
    id: mode
    name: Mode
    enum_datapoint: 21
    options:
      0: fixed
      1: animation
      2: music
    web_server:
      sorting_group_id: sorting_group_mode_settings


sensor:
  - platform: wifi_signal
    name: "${plug_name} WiFi Signal"
    update_interval: 60s
    web_server:
      sorting_group_id: sorting_group_esphome_settings

  - platform: uptime
    name: "${plug_name} Uptime"
    web_server:
      sorting_group_id: sorting_group_esphome_settings


number:
  - platform: tuya
    id: timer
    name: "26  -Timer"
    number_datapoint: 26
    min_value: 0
    max_value: 64000
    step: 1
    web_server:
      sorting_group_id: sorting_group_mode_settings

  - platform: template
    id: fixed_brightness
    name: "Fixed Brightness"
    min_value: 0
    max_value: 1000
    step: 1
    optimistic: True
    set_action:
      then:
        select.set_index:
          id: mode
          index: 0
    on_value:
      then:
        - script.wait: update_colour
        - component.update: colour
    web_server:
      sorting_group_id: sorting_group_fixed_settings

  - platform: template
    id: fixed_saturation
    name: "Fixed Saturation"
    min_value: 0
    max_value: 1000
    step: 1
    optimistic: True
    set_action:
      then:
        select.set_index:
          id: mode
          index: 0
    on_value:
      then:
        - script.wait: update_colour
        - component.update: colour
    web_server:
      sorting_group_id: sorting_group_fixed_settings

  - platform: template
    id: fixed_colour
    name: "Fixed Colour"
    min_value: 0
    max_value: 359
    step: 1
    optimistic: True
    set_action:
      then:
        select.set_index:
          id: mode
          index: 0
    on_value:
      then:
        - script.wait: update_colour
        - component.update: colour
    web_server:
      sorting_group_id: sorting_group_fixed_settings

  - platform: template
    id: animation_mode
    name: "Animation Mode"
    min_value: 0
    max_value: 9 # more modes seem to be available via the remote and app
    step: 1
    optimistic: True
    set_action:
      then:
        select.set_index:
          id: mode
          index: 1
    on_value:
      then:
        - script.wait: update_animation
        - component.update: animation
    web_server:
      sorting_group_id: sorting_group_animation_settings

  - platform: template
    id: animation_brightness
    name: "Animation Brightness"
    min_value: 0
    max_value: 1000
    step: 1
    optimistic: True
    set_action:
      then:
        select.set_index:
          id: mode
          index: 1
    on_value:
      then:
        - script.wait: update_animation
        - component.update: animation
    web_server:
      sorting_group_id: sorting_group_animation_settings

  - platform: template
    id: music_mode
    name: "Music Mode"
    min_value: 0
    max_value: 9
    step: 1
    optimistic: True
    set_action:
      then:
        select.set_index:
          id: mode
          index: 2
    on_value:
      then:
        - script.wait: update_music
        - component.update: music
    web_server:
      sorting_group_id: sorting_group_music_settings

  - platform: template
    id: music_sensitivity
    name: "Music Sensitivity"
    min_value: 0
    max_value: 2000   # max value 1584 ?
    step: 1
    optimistic: True
    set_action:
      then:
        select.set_index:
          id: mode
          index: 2
    on_value:
      then:
        - script.wait: update_music
        - component.update: music
    web_server:
      sorting_group_id: sorting_group_music_settings


switch:
  - platform: "tuya"
    id: on_off
    name: "20 - ON/OFF"
    switch_datapoint: 20
    web_server:
      sorting_group_id: sorting_group_mode_settings
  - platform: template
    name: "Flash"
    id: flash
    turn_on_action:
      - repeat:
          count: 20
          then:
            - switch.toggle: on_off
            - delay: 100ms
            - switch.toggle: on_off
            - delay: 200ms
      - switch.turn_off: flash

text_sensor:
  - platform: version
    name: "${friendly_name} Version"
    web_server:
      sorting_group_id: sorting_group_esphome_settings

  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP"
      web_server:
        sorting_group_id: sorting_group_esphome_settings
    ssid:
      name: "${friendly_name} SSID"
      web_server:
        sorting_group_id: sorting_group_esphome_settings
    bssid:
      name: "${friendly_name} BSSID"
      web_server:
        sorting_group_id: sorting_group_esphome_settings

  - platform: template
    internal: True
    id: colour
    name: colour
    update_interval: never
    lambda: |-
      return esphome::str_sprintf("%04x%04x%04x",(int)id(fixed_colour).state,(int)id(fixed_saturation).state,(int)id(fixed_brightness).state);
    on_value:
      - lambda: |-
          if (id(dp_fixed_colour).state != x) {
            ESP_LOGI("main", "Setting Colour Mode on MCU from: %s to: %s",id(dp_fixed_colour).state.c_str(), x.c_str());
            id(tuyadevice).set_string_datapoint_value(24,x);
          } else {
             ESP_LOGI("main", "Not Setting Colour Mode as no change");
          }

  - platform: template
    internal: True
    id: animation
    name: animation
    update_interval: never
    lambda: |-
      return esphome::str_sprintf("%x%04x",(int)id(animation_mode).state,(int)id(animation_brightness).state);
    on_value:
      - lambda: |-
          if (id(dp_animation).state != x) {
            ESP_LOGI("main", "Setting Animation Mode on MCU from: %s to: %s",id(dp_animation).state.c_str(), x.c_str());
            id(tuyadevice).set_string_datapoint_value(25,x);
          } else {
             ESP_LOGI("main", "Not Setting Animation Mode as no change");
          }

  - platform: template
    internal: True
    id: music
    name: music
    update_interval: never
    lambda: |-
      return esphome::str_sprintf("%X%03X1F41016803E801F4",(int)id(music_mode).state,(int)id(music_sensitivity).state);
    on_value:
      - lambda: |-
          if (id(dp_music).state != x) {
            ESP_LOGI("main", "Setting Music Mode on MCU from: %s to: %s",id(dp_music).state.c_str(), x.c_str());
            id(tuyadevice).set_string_datapoint_value(101,x);
          } else {
             ESP_LOGI("main", "Not Setting Music as no change");
          }

  - platform: "tuya"
    internal: False
    id: dp_fixed_colour
    name: "24 - Fixed Colour"
    sensor_datapoint: 24
    web_server:
      sorting_group_id: sorting_group_fixed_settings
    on_value:
      then:
        - script.execute:
            id: update_colour
            new_value: !lambda return x;

  - platform: "tuya"
    internal: False
    id: dp_animation
    name: "25 - Animation"
    sensor_datapoint: 25
    web_server:
      sorting_group_id: sorting_group_animation_settings
    on_value:
      then:
        - script.execute:
            id: update_animation
            new_value: !lambda return x;

  - platform: "tuya"
    internal: False
    id: dp_music
    name: "101 - Music Mode"
    sensor_datapoint: 101
    web_server:
      sorting_group_id: sorting_group_music_settings
    on_value:
      then:
        - script.execute:
            id: update_music
            new_value: !lambda return x;

script:
  - id: update_colour
    parameters:
      new_value: string
    mode: queued
    then:
      - lambda: |-
          std::string colour_str = new_value.substr(0,4);
          std::string saturation_str = new_value.substr(4,4);
          std::string brightness_str = new_value.substr(8,4);

          int colour = stoi(colour_str, 0, 16);
          int saturation = stoi(saturation_str, 0, 16);
          int brightness = stoi(brightness_str, 0, 16);

          if (id(fixed_colour).state != colour) {
              ESP_LOGI("main", "Setting value of fixed_colour to : %d", colour);
              id(fixed_colour).publish_state(colour);
          }
          if (id(fixed_saturation).state != saturation) {
              ESP_LOGI("main", "Setting value of fixed_saturation to : %d", saturation);
              id(fixed_saturation).publish_state(saturation);
          }
          if (id(fixed_brightness).state != brightness) {
              ESP_LOGI("main", "Setting value of fixed_brightness to : %d", brightness);
              id(fixed_brightness).publish_state(brightness);
          }

  - id: update_animation
    parameters:
      new_value: string
    mode: queued
    then:
      - lambda: |-
          std::string mode_str = new_value.substr(0,1);
          std::string brightness_str = new_value.substr(1,4);

          int mode = stoi(mode_str, 0, 16);
          int brightness = stoi(brightness_str, 0, 16);

          if (id(animation_mode).state != mode) {
              ESP_LOGI("main", "Setting value of animation mode to : %d", mode);
              id(animation_mode).publish_state(mode);
          }
          if (id(animation_brightness).state != brightness) {
              ESP_LOGI("main", "Setting value of amimation_brightness to : %d", brightness);
              id(animation_brightness).publish_state(brightness);
          }

  - id: update_music
    parameters:
      new_value: string
    mode: queued
    then:
      - lambda: |-
          std::string mode_str = new_value.substr(0,1);
          std::string sensitivity_str = new_value.substr(1,3);

          int mode = stoi(mode_str, 0, 16);
          int sensitivity = stoi(sensitivity_str, 0, 16);

          if (id(music_mode).state != mode) {
              ESP_LOGI("main", "Setting value of music mode to : %d", mode);
              id(music_mode).publish_state(mode);
          }
          if (id(music_sensitivity).state != sensitivity) {
              ESP_LOGI("main", "Setting value of music_sensitivity to : %d", sensitivity);
              id(music_sensitivity).publish_state(sensitivity);
          }

